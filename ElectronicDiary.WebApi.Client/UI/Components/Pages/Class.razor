@page "/classes"
@using System.Globalization;
@inject HttpClient Http

<PageTitle>Classes</PageTitle>

<h1>Классы</h1>

<Button class="add-new-button" Clicked="@ShowAddModal" Color="Blazorise.Color.Primary" Style="width: 200px; height: 40px;">
    Добавить класс
</Button>

<div class="data-container">
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Номер</th>
                <th>Литера</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var classItem in _classes)
            {
                <tr>
                    <td>@classItem.Id</td>
                    <td>@classItem.Number</td>
                    <td>@classItem.Letters</td>
                    <td>
                        <Button 
                                class="edit-item"
                                @onclick="@(() => ShowUpdModal(classItem.Id))"
                                Style="max-width: 89px"
                                TextAlignment="TextAlignment.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Style="width: 20px; height: 20px;" />
                        </Button>
                    </td>
                    <td>
                        <Button class="edit-item"
                                @onclick="@(() => DeleteClass(classItem.Id))"
                                Style="max-width: 89px"
                                TextAlignment="TextAlignment.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Style="width: 20px; height: 20px;" />
                        </Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<Modal @ref="modalRef" >
    <ModalContent Centered>
        <ModalBody>
            <div class="mb-3">
                <label for="number">Номер:</label>
                <input type="number" id="number" @bind="newClass.Number" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="letters">Литера:</label>
                <input type="text" id="letters" @bind="newClass.Letters" class="form-control" />
            </div>
        </ModalBody>
        <ModalFooter>
            <Button Color="Blazorise.Color.Primary" Clicked="@(forAdd ? AddNewClass : UpdateClass)">
                @(forAdd ? "Добавить" : "Изменить")
            </Button>
            <Button Color="Blazorise.Color.Secondary" Clicked="@CancelHandler">
                Отмена
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<Class> _classes = new();
    private Modal? modalRef = null!;
    private Class newClass = new() 
    {       
        Id = 0,
        Number = 0,
        Letters = ""
    };
    private bool forAdd = true;
    private string classUrl = "api/Class";

    private async Task UpdateMainList()
    {
        var response = await Http.GetFromJsonAsync<List<Class>>(classUrl);
        if (response != null)
        {
            _classes = response;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateMainList();
    }

    private async Task AddNewClass()
    {
        await Http.PostAsJsonAsync<Class>(classUrl, newClass);
        await UpdateMainList();
        await modalRef!.Hide();
    }

    private async Task DeleteClass(int id)
    {
        await Http.DeleteAsync($"{classUrl}/{id}");
        await UpdateMainList();
    }

    private async Task UpdateClass()
    {
        await Http.PutAsJsonAsync($"{classUrl}/{newClass.Id}", newClass);

        newClass = new()
        {
            Id = 0,
            Number = 0,
            Letters = ""
        };
        await UpdateMainList();
        await modalRef!.Hide();
    }

    private async Task ShowUpdModal(int id)
    {
        forAdd = false;
        var response = await Http.GetFromJsonAsync<Class>($"{classUrl}/{id}");
        if (response != null)
        {
            newClass = response;
        }
        await modalRef!.Show();
    }

    private async Task ShowAddModal() {
        forAdd = true;
        newClass = new()
        {
            Id = 0,
            Number = 0,
            Letters = ""
        };
        await modalRef!.Show();
    }

    private async Task CancelHandler()
    {
        await modalRef!.Hide();
    }
}
