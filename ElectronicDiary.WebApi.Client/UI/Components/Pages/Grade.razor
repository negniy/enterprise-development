@page "/grades"
@using System.Globalization;
@inject HttpClient Http

<PageTitle>Grades</PageTitle>

<h1>Оценки</h1>

<Button class="add-new-button" Clicked="@ShowAddModal" Color="Blazorise.Color.Primary" Style="width: 200px; height: 40px;">
    Добавить оценку
</Button>

<div class="data-container">
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Id предмета</th>
                <th>Id студента</th>
                <th>Оценка</th>
                <th>Дата</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var grade in _grades)
            {
                <tr>
                    <td>@grade.Id</td>
                    <td>@grade.SubjectId</td>
                    <td>@grade.StudentId</td>
                    <td>@grade.Value</td>
                    <td>@grade.Date.ToString("yyyy-MM-dd")</td>
                    <td>
                        <Button 
                                class="edit-item"
                                @onclick="@(() => ShowUpdModal(grade.Id))"
                                Style="max-width: 89px"
                                TextAlignment="TextAlignment.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Style="width: 20px; height: 20px;" />
                        </Button>
                    </td>
                    <td>
                        <Button class="edit-item"
                                @onclick="@(() => DeleteGrade(grade.Id))"
                                Style="max-width: 89px"
                                TextAlignment="TextAlignment.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Style="width: 20px; height: 20px;" />
                        </Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<Modal @ref="modalRef" >
    <ModalContent Centered>
        <ModalBody>
            <div class="mb-3">
                <label for="subjectId">Id предмета:</label>
                <input type="number" id="subjectId" @bind="newGrade.SubjectId" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="studentId">Id студента:</label>
                <input type="number" id="studentId" @bind="newGrade.StudentId" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="value">Оценка:</label>
                <input type="number" id="value" @bind="newGrade.Value" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="date">Дата:</label>
                <input type="date" id="date" @bind="newGrade.Date" class="form-control" />
            </div>
        </ModalBody>
        <ModalFooter>
            <Button Color="Blazorise.Color.Primary" Clicked="@(forAdd ? AddNewGrade : UpdateGrade)">
                @(forAdd ? "Добавить" : "Изменить")
            </Button>
            <Button Color="Blazorise.Color.Secondary" Clicked="@CancelHandler">
                Отмена
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<Grade> _grades = new();
    private Modal? modalRef = null!;
    private Grade newGrade = new() 
    {       
        Id = 0,
        SubjectId = 0,
        StudentId = 0,
        Value = 0,
        Date = DateTime.Now
    };
    private bool forAdd = true;
    private string gradeUrl = "api/Grade";

    private async Task UpdateMainList()
    {
        var response = await Http.GetFromJsonAsync<List<Grade>>(gradeUrl);
        if (response != null)
        {
            _grades = response;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateMainList();
    }

    private async Task AddNewGrade()
    {
        await Http.PostAsJsonAsync<Grade>(gradeUrl, newGrade);
        await UpdateMainList();
        await modalRef!.Hide();
    }

    private async Task DeleteGrade(int id)
    {
        await Http.DeleteAsync($"{gradeUrl}/{id}");
        await UpdateMainList();
    }

    private async Task UpdateGrade()
    {
        await Http.PutAsJsonAsync($"{gradeUrl}/{newGrade.Id}", newGrade);

        newGrade = new()
        {
            Id = 0,
            SubjectId = 0,
            StudentId = 0,
            Value = 0,
            Date = DateTime.Now
        };
        await UpdateMainList();
        await modalRef!.Hide();
    }

    private async Task ShowUpdModal(int id)
    {
        forAdd = false;
        var response = await Http.GetFromJsonAsync<Grade>($"{gradeUrl}/{id}");
        if (response != null)
        {
            newGrade = response;
        }
        await modalRef!.Show();
    }

    private async Task ShowAddModal() {
        forAdd = true;
        newGrade = new()
        {
            Id = 0,
            SubjectId = 0,
            StudentId = 0,
            Value = 0,
            Date = DateTime.Now
        }; 
        await modalRef!.Show();
    }

    private async Task CancelHandler()
    {
        await modalRef!.Hide();
    }
}
