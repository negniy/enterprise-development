@page "/queries"
@using System.Globalization;
@inject HttpClient Http

<PageTitle>Запросы</PageTitle>

<h1>Запросы</h1>

<div class="task-container">
    <div class="header-container">
        <h5>Вывести всех учеников конкретного класса. Выберите класс:</h5>
        <select id="classSelect" @bind="_selectedClassId">
            @foreach (var classroom in _classrooms)
            {
                <option value="@classroom.Id">@classroom.Name</option>
            }
        </select>
        <div class="button-container">
            <Button class="get-task-result" Color="Blazorise.Color.Primary" Clicked="@(() => ClickHandler(1))">
                Выполнить
            </Button>
            <Button class="clear-task-result" Color="Blazorise.Color.Danger" Clicked="@(() => ClearTask(1))">
                Очистить
            </Button>
        </div>
    </div>

    @if (query1 != null)
    {
        <div class="result-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Имя</th>
                        <th>Фамилия</th>
                        <th>Дата рождения</th>
                        <th>Класс</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in query1)
                    {
                        <tr>
                            <td>@student.Id</td>
                            <td>@student.FirstName</td>
                            <td>@student.LastName</td>
                            <td>@student.DateOfBirth.ToShortDateString()</td>
                            <td>@student.ClassName</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<div class="task-container">
    <div class="header-container">
        <h5>Вывести оценки всех учеников за определённый период</h5>
        <label>Дата с: </label>
        <input type="date" id="dateFrom" @bind="_startDate" />
        <label>Дата по: </label>
        <input type="date" id="dateTo" @bind="_endDate" />
        <div class="button-container">
            <Button class="get-task-result" Color="Blazorise.Color.Primary" Clicked="@(() => ClickHandler(2))">
                Выполнить
            </Button>
            <Button class="clear-task-result" Color="Blazorise.Color.Danger" Clicked="@(() => ClearTask(2))">
                Очистить
            </Button>
        </div>
    </div>

    @if (query2 != null)
    {
        <div class="result-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Id ученика</th>
                        <th>Имя</th>
                        <th>Фамилия</th>
                        <th>Оценка</th>
                        <th>Дата</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var grade in query2)
                    {
                        <tr>
                            <td>@grade.StudentId</td>
                            <td>@grade.StudentName</td>
                            <td>@grade.StudentSurname</td>
                            <td>@grade.Value</td>
                            <td>@grade.Date.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Classroom> _classrooms = new();
    private List<StudentGradesDto> query1 = null!;
    private List<StudentGradesDto> query2 = null!;
    private int _selectedClassId = 0;
    private DateTime _startDate = DateTime.Today.AddMonths(-1);
    private DateTime _endDate = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        await GetClassrooms();
    }

    private async Task GetClassrooms()
    {
        var response = await Http.GetFromJsonAsync<List<Classroom>>("api/Classrooms");
        if (response != null)
        {
            _classrooms = response;
            if (_classrooms.Any())
            {
                _selectedClassId = _classrooms.First().Id;
            }
        }
    }

    private async Task ClickHandler(int queryId)
    {
        switch (queryId)
        {
            case 1:
                var response1 = await Http.GetFromJsonAsync<List<StudentGradesDto>>($"api/Query/students_by_class?classId={_selectedClassId}");
                if (response1 != null)
                {
                    query1 = response1;
                }
                break;
            case 2:
                string formattedStartDate = _startDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                string formattedEndDate = _endDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                var response2 = await Http.GetFromJsonAsync<List<StudentGradesDto>>($"api/Query/grades_by_date?startDate={formattedStartDate}&endDate={formattedEndDate}");
                if (response2 != null)
                {
                    query2 = response2;
                }
                break;
        }
    }

    private void ClearTask(int taskId)
    {
        switch (taskId)
        {
            case 1:
                query1 = null!;
                break;
            case 2:
                query2 = null!;
                break;
        }
    }
}
